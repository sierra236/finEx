{"version":3,"sources":["../../src/token-cache/index.ts"],"sourcesContent":["import * as SecureStore from 'expo-secure-store';\n\nimport type { TokenCache } from '../cache';\nimport { isNative } from '../utils';\n\n/**\n * Create a token cache using Expo's SecureStore\n */\nconst createTokenCache = (): TokenCache => {\n  return {\n    getToken: async (key: string) => {\n      try {\n        const item = await SecureStore.getItemAsync(key);\n        return item;\n      } catch {\n        await SecureStore.deleteItemAsync(key);\n        return null;\n      }\n    },\n    saveToken: (key: string, token: string) => {\n      return SecureStore.setItemAsync(key, token);\n    },\n  };\n};\n\n/**\n * Secure token cache implementation for Expo apps.\n *\n * Clerk stores the active user's session token in memory by default. In Expo apps, the\n * recommended way to store sensitive data, such as tokens, is by using `expo-secure-store`\n * which encrypts the data before storing it.\n *\n * To implement your own token cache, create an object that implements the `TokenCache` interface:\n * - `getToken(key: string): Promise<string | null>`\n * - `saveToken(key: string, token: string): Promise<void>`\n *\n * @type {TokenCache | undefined} Object with `getToken` and `saveToken` methods, undefined on web\n */\nexport const tokenCache = isNative() ? createTokenCache() : undefined;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA6B;AAG7B,mBAAyB;AAKzB,MAAM,mBAAmB,MAAkB;AACzC,SAAO;AAAA,IACL,UAAU,OAAO,QAAgB;AAC/B,UAAI;AACF,cAAM,OAAO,MAAM,YAAY,aAAa,GAAG;AAC/C,eAAO;AAAA,MACT,QAAQ;AACN,cAAM,YAAY,gBAAgB,GAAG;AACrC,eAAO;AAAA,MACT;AAAA,IACF;AAAA,IACA,WAAW,CAAC,KAAa,UAAkB;AACzC,aAAO,YAAY,aAAa,KAAK,KAAK;AAAA,IAC5C;AAAA,EACF;AACF;AAeO,MAAM,iBAAa,uBAAS,IAAI,iBAAiB,IAAI;","names":[]}